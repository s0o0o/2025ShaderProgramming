#include "stdafx.h"
#include "Renderer.h"

Renderer::Renderer(int windowSizeX, int windowSizeY)
{
	Initialize(windowSizeX, windowSizeY);
}


Renderer::~Renderer()
{
}

void Renderer::Initialize(int windowSizeX, int windowSizeY)
{
	//Set window size
	m_WindowSizeX = windowSizeX;
	m_WindowSizeY = windowSizeY;

	//Load shaders
	m_SolidRectShader = CompileShaders("./Shaders/SolidRect.vs", "./Shaders/SolidRect.fs");

	// LECTURE4 (0916)
	m_TestShader = CompileShaders("./Shaders/Test.vs", "./Shaders/Test.fs");

	// LECTURE4 (0916)
	m_ParticleShader = CompileShaders("./Shaders/Particles.vs", "./Shaders/Particles.fs");

	//Create VBOs
	CreateVertexBufferObjects();

	if (m_SolidRectShader > 0 && m_VBORect > 0)
	{
		m_Initialized = true;
	}


	GenerateParticles(1000);
}

bool Renderer::IsInitialized()
{
	return m_Initialized;
}

void Renderer::CreateVertexBufferObjects()
{
	float rect[]
		=
	{
		-1.f / m_WindowSizeX, -1.f / m_WindowSizeY, 0.f, -1.f / m_WindowSizeX, 1.f / m_WindowSizeY, 0.f, 1.f / m_WindowSizeX, 1.f / m_WindowSizeY, 0.f, //Triangle1
		-1.f / m_WindowSizeX, -1.f / m_WindowSizeY, 0.f,  1.f / m_WindowSizeX, 1.f / m_WindowSizeY, 0.f, 1.f / m_WindowSizeX, -1.f / m_WindowSizeY, 0.f, //Triangle2
	};

	glGenBuffers(1, &m_VBORect);
	glBindBuffer(GL_ARRAY_BUFFER, m_VBORect);
	glBufferData(GL_ARRAY_BUFFER, sizeof(rect), rect, GL_STATIC_DRAW);

	/////////////////////////////////////
	///////////		LECTURE 2~
	/////////////////////////////////////

	float temp = 0.5f;
	float size = 0.25f;
	float testPos[]
		=
	{
		(0.f - temp) * size, (0.f - temp) * size, 0.f, 0.5,
		(1.f - temp) * size, (0.f - temp) * size, 0.f, 0.5,
		(1.f - temp) * size, (1.f - temp) * size, 0.f, 0.5,	// 반시계방향으로 버텍스 담아둬야함

		(0.f - temp) * size, (0.f - temp) * size, 0.f,  0.5,
		(1.f - temp) * size, (1.f - temp) * size, 0.f,  0.5,
		(0.f - temp) * size, (1.f - temp) * size, 0.f,  0.5, // Quad1

		(0.f - temp) * size, (0.f - temp) * size, 0.f,  1.0,
		(1.f - temp) * size, (0.f - temp) * size, 0.f,  1.0,
		(1.f - temp) * size, (1.f - temp) * size, 0.f,  1.0,	// 반시계방향으로 버텍스 담아둬야함

		(0.f - temp) * size, (0.f - temp) * size, 0.f, 1.0,
		(1.f - temp) * size, (1.f - temp) * size, 0.f, 1.0,
		(0.f - temp) * size, (1.f - temp) * size, 0.f, 1.0, // Quad2
	};


	glGenBuffers(1, &m_VBOTestPos);	// (갯수, 레퍼런스에 넘겨줌)	
	// 이렇게만 하면 gpu에 VBO에 대한 메모리가 전혀 저장이 되지 않음.. 데이터를 올려줘야함
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOTestPos);	// testID라는 애를 쓰겠다는.. 활성화하겠다는 의미(내가 이해한건..)
	glBufferData(GL_ARRAY_BUFFER, sizeof(testPos), testPos, GL_STATIC_DRAW);

	///////////		LECTURE 3


	float testColor[]
		=
	{
		1.f, 0.f, 0.f, 1.f,
		0.f, 1.f, 0.f, 1.f,
		0.f, 0.f, 1.f, 1.f,		// Triangle1	// 반시계방향으로 버텍스 담아둬야함
		1.f, 0.f, 0.f, 1.f,
		0.f, 1.f, 0.f, 1.f,
		0.f, 0.f, 1.f, 1.f,

		1.f, 0.f, 0.f, 1.f,
		0.f, 1.f, 0.f, 1.f,
		0.f, 0.f, 1.f, 1.f,
		1.f, 0.f, 0.f, 1.f,
		0.f, 1.f, 0.f, 1.f,
		0.f, 0.f, 1.f, 1.f
	};


	glGenBuffers(1, &m_VBOTestCol);	// (갯수, 레퍼런스에 넘겨줌)	
	// 이렇게만 하면 gpu에 VBO에 대한 메모리가 전혀 저장이 되지 않음.. 데이터를 올려줘야함
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOTestCol);	// testID라는 애를 쓰겠다는.. 활성화하겠다는 의미(내가 이해한건..)
	glBufferData(GL_ARRAY_BUFFER, sizeof(testColor), testColor, GL_STATIC_DRAW);

}

void Renderer::AddShader(GLuint ShaderProgram, const char* pShaderText, GLenum ShaderType)
{
	//쉐이더 오브젝트 생성
	GLuint ShaderObj = glCreateShader(ShaderType);

	if (ShaderObj == 0) {
		fprintf(stderr, "Error creating shader type %d\n", ShaderType);
	}

	const GLchar* p[1];
	p[0] = pShaderText;
	GLint Lengths[1];

	size_t slen = strlen(pShaderText);
	if (slen > INT_MAX) {
		// Handle error
	}
	GLint len = (GLint)slen;

	Lengths[0] = len;
	//쉐이더 코드를 쉐이더 오브젝트에 할당
	glShaderSource(ShaderObj, 1, p, Lengths);

	//할당된 쉐이더 코드를 컴파일
	glCompileShader(ShaderObj);

	GLint success;
	// ShaderObj 가 성공적으로 컴파일 되었는지 확인
	glGetShaderiv(ShaderObj, GL_COMPILE_STATUS, &success);
	if (!success) {
		GLchar InfoLog[1024];

		//OpenGL 의 shader log 데이터를 가져옴
		glGetShaderInfoLog(ShaderObj, 1024, NULL, InfoLog);
		fprintf(stderr, "Error compiling shader type %d: '%s'\n", ShaderType, InfoLog);
		printf("%s \n", pShaderText);
	}

	// ShaderProgram 에 attach!!
	glAttachShader(ShaderProgram, ShaderObj);
}

bool Renderer::ReadFile(char* filename, std::string* target)
{
	std::ifstream file(filename);
	if (file.fail())
	{
		std::cout << filename << " file loading failed.. \n";
		file.close();
		return false;
	}
	std::string line;
	while (getline(file, line)) {
		target->append(line.c_str());
		target->append("\n");
	}
	return true;
}

GLuint Renderer::CompileShaders(char* filenameVS, char* filenameFS)
{
	GLuint ShaderProgram = glCreateProgram(); //빈 쉐이더 프로그램 생성

	if (ShaderProgram == 0) { //쉐이더 프로그램이 만들어졌는지 확인
		fprintf(stderr, "Error creating shader program\n");
	}

	std::string vs, fs;

	//shader.vs 가 vs 안으로 로딩됨
	if (!ReadFile(filenameVS, &vs)) {
		printf("Error compiling vertex shader\n");
		return -1;
	};

	//shader.fs 가 fs 안으로 로딩됨
	if (!ReadFile(filenameFS, &fs)) {
		printf("Error compiling fragment shader\n");
		return -1;
	};

	// ShaderProgram 에 vs.c_str() 버텍스 쉐이더를 컴파일한 결과를 attach함
	AddShader(ShaderProgram, vs.c_str(), GL_VERTEX_SHADER);

	// ShaderProgram 에 fs.c_str() 프레그먼트 쉐이더를 컴파일한 결과를 attach함
	AddShader(ShaderProgram, fs.c_str(), GL_FRAGMENT_SHADER);

	GLint Success = 0;
	GLchar ErrorLog[1024] = { 0 };

	//Attach 완료된 shaderProgram 을 링킹함
	glLinkProgram(ShaderProgram);

	//링크가 성공했는지 확인
	glGetProgramiv(ShaderProgram, GL_LINK_STATUS, &Success);

	if (Success == 0) {
		// shader program 로그를 받아옴
		glGetProgramInfoLog(ShaderProgram, sizeof(ErrorLog), NULL, ErrorLog);
		std::cout << filenameVS << ", " << filenameFS << " Error linking shader program\n" << ErrorLog;
		return -1;
	}

	glValidateProgram(ShaderProgram);
	glGetProgramiv(ShaderProgram, GL_VALIDATE_STATUS, &Success);
	if (!Success) {
		glGetProgramInfoLog(ShaderProgram, sizeof(ErrorLog), NULL, ErrorLog);
		std::cout << filenameVS << ", " << filenameFS << " Error validating shader program\n" << ErrorLog;
		return -1;
	}

	glUseProgram(ShaderProgram);
	std::cout << filenameVS << ", " << filenameFS << " Shader compiling is done.";

	return ShaderProgram;
}

void Renderer::DrawSolidRect(float x, float y, float z, float size, float r, float g, float b, float a)
{
	float newX, newY;

	GetGLPosition(x, y, &newX, &newY);

	//Program select
	glUseProgram(m_SolidRectShader);

	glUniform4f(glGetUniformLocation(m_SolidRectShader, "u_Trans"), newX, newY, 0, size);
	glUniform4f(glGetUniformLocation(m_SolidRectShader, "u_Color"), r, g, b, a);

	int attribPosition = glGetAttribLocation(m_SolidRectShader, "a_Position");
	glEnableVertexAttribArray(attribPosition);
	glBindBuffer(GL_ARRAY_BUFFER, m_VBORect);
	glVertexAttribPointer(attribPosition, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 3, 0);

	glDrawArrays(GL_TRIANGLES, 0, 6);

	glDisableVertexAttribArray(attribPosition);

	glBindFramebuffer(GL_FRAMEBUFFER, 0);
}

void Renderer::DrawTest()
{
	//Program select
	glUseProgram(m_TestShader);

	m_time += 0.005;
	int uTimeLoc = glGetUniformLocation(m_TestShader, "u_Time");
	glUniform1f(uTimeLoc, m_time);

	int aPosLoc = glGetAttribLocation(m_TestShader, "a_Position"); // a_Position라는 함수를 받아와서
	int aRadiusLoc = glGetAttribLocation(m_TestShader, "a_Radius"); // 0922
	int aColLoc = glGetAttribLocation(m_TestShader, "a_Color"); // lecture3 컬러 넣기

	glEnableVertexAttribArray(aPosLoc);	// enable 시켜줘야함, attribute는 사용자가 입력한 값
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOTestPos);	// 받아온걸 bind하고
	glVertexAttribPointer(
		aPosLoc, 3, GL_FLOAT,		// x,y,z 좌표값 3개씩 읽어와라
		GL_FALSE, sizeof(float) * 4, 0);

	glEnableVertexAttribArray(aRadiusLoc);	// enable 시켜줘야함, attribute는 사용자가 입력한 값
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOTestPos);	// 받아온걸 bind하고
	glVertexAttribPointer(
		aRadiusLoc, 1, GL_FLOAT,
		GL_FALSE, sizeof(float) * 4,
		(GLvoid*)(sizeof(float) * 3));	// 얘는 첫 값 읽어올때의.. 걔 처음 위치? 그래서 radius값은 4번째부터 시작하니까 0 이 아니라..

	glEnableVertexAttribArray(aColLoc);	// enable 시켜줘야함, attribute는 사용자가 입력한 값
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOTestCol);	// 받아온걸 bind하고
	glVertexAttribPointer(
		aColLoc, 4, GL_FLOAT,
		GL_FALSE, sizeof(float) * 4, 0);	// m_VBOTestCol 얘한테 한방에 몇개 읽어올래? -> 4개니까 수정(스트라이드도 수정)
	glDrawArrays(GL_TRIANGLES, 0, 12);		// 스트라이드는 몇개씩 건너뛸래 이런거

	glDisableVertexAttribArray(aPosLoc);
	glBindFramebuffer(GL_FRAMEBUFFER, 0);
}

void Renderer::DrawParticle()
{
	//Program select
	GLuint shader = m_ParticleShader;

	glUseProgram(shader);

	m_time += 0.005;
	int uTimeLoc = glGetUniformLocation(shader, "u_Time");
	glUniform1f(uTimeLoc, m_time);

	int aPosLoc = glGetAttribLocation(shader, "a_Position"); // a_Position라는 함수를 받아와서
	int aRadiusLoc = glGetAttribLocation(shader, "a_Radius"); // 0922
	int aColLoc = glGetAttribLocation(shader, "a_Color"); // lecture3 컬러 넣기

	glEnableVertexAttribArray(aPosLoc);	// enable 시켜줘야함, attribute는 사용자가 입력한 값
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOParticle);	// 받아온걸 bind하고
	glVertexAttribPointer(
		aPosLoc, 3, GL_FLOAT,		// x,y,z 좌표값 3개씩 읽어와라
		GL_FALSE, sizeof(float) * 8, 0);	// 지금 한 버텍스에 8개의 값 저장되어있.. 그러니까 8개씩 건너뛰도록!

	glEnableVertexAttribArray(aRadiusLoc);	// enable 시켜줘야함, attribute는 사용자가 입력한 값
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOParticle);	// 받아온걸 bind하고
	glVertexAttribPointer(
		aRadiusLoc, 1, GL_FLOAT,
		GL_FALSE, sizeof(float) * 8,
		(GLvoid*)(sizeof(float) * 3));	// 얘는 첫 값 읽어올때의.. 걔 처음 위치? 그래서 radius값은 4번째부터 시작하니까 0 이 아니라..

	glEnableVertexAttribArray(aColLoc);	
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOParticle);	
	glVertexAttribPointer(
		aColLoc, 4, GL_FLOAT,
		GL_FALSE, sizeof(float) * 8, 
		(GLvoid*)(sizeof(float) * 4));

	glDrawArrays(GL_TRIANGLES, 0, m_VBOParticleVertexCount);		// 스트라이드는 몇개씩 건너뛸래 이런거

	glDisableVertexAttribArray(aPosLoc);
	glBindFramebuffer(GL_FRAMEBUFFER, 0);
}


void Renderer::GetGLPosition(float x, float y, float* newX, float* newY)
{
	*newX = x * 2.f / m_WindowSizeX;
	*newY = y * 2.f / m_WindowSizeY;
}

void Renderer::GenerateParticles(int numParticles)
{
	int floatCountPerVertex = 3 + 1 + 4; // x,y,z, value, r,g,b,a
	int verticesCountPerParticle = 6;
	int floatCountPerParticle =
		floatCountPerVertex * verticesCountPerParticle;
	int totalVerticesCount = numParticles * verticesCountPerParticle;
	int totlaFloatCount = floatCountPerVertex * totalVerticesCount;

	float* vertices = new float[totlaFloatCount];

	for (int i = 0; i < numParticles; ++i) {
		float x, y, z, value, r, g, b, a;
		x = ((float)rand() / (float)RAND_MAX) * 2.f - 1.f;
		y = ((float)rand() / (float)RAND_MAX) * 2.f - 1.f;
		z = 0.f;

		value = ((float)rand() / (float)RAND_MAX);
		
		r = ((float)rand() / (float)RAND_MAX);
		g = ((float)rand() / (float)RAND_MAX);
		b = ((float)rand() / (float)RAND_MAX);
		a = ((float)rand() / (float)RAND_MAX);
		
		float size;
		size = ((float)rand() / (float)RAND_MAX) * 0.01f;

		int index = i * floatCountPerVertex * verticesCountPerParticle;
		vertices[index] = x - size; index++;	// v1
		vertices[index] = y - size; index++;
		vertices[index] = z; index++;
		vertices[index] = value; index++;
		vertices[index] = r; index++;
		vertices[index] = g; index++;
		vertices[index] = b; index++;
		vertices[index] = a; index++;		

		vertices[index] = x + size; index++;	// v2
		vertices[index] = y + size; index++;
		vertices[index] = z; index++;
		vertices[index] = value; index++;
		vertices[index] = r; index++;
		vertices[index] = g; index++;
		vertices[index] = b; index++;
		vertices[index] = a; index++;

		vertices[index] = x - size; index++;	// v3
		vertices[index] = y + size; index++;
		vertices[index] = z; index++;
		vertices[index] = value; index++;
		vertices[index] = r; index++;
		vertices[index] = g; index++;
		vertices[index] = b; index++;
		vertices[index] = a; index++;

		vertices[index] = x - size; index++;	// v4
		vertices[index] = y - size; index++;
		vertices[index] = z; index++;
		vertices[index] = value; index++;
		vertices[index] = r; index++;
		vertices[index] = g; index++;
		vertices[index] = b; index++;
		vertices[index] = a; index++;

		vertices[index] = x + size; index++;	// v5
		vertices[index] = y - size; index++;
		vertices[index] = z; index++;
		vertices[index] = value; index++;
		vertices[index] = r; index++;
		vertices[index] = g; index++;
		vertices[index] = b; index++;
		vertices[index] = a; index++;

		vertices[index] = x + size; index++;	// v3
		vertices[index] = y + size; index++;
		vertices[index] = z; index++;
		vertices[index] = value; index++;
		vertices[index] = r; index++;
		vertices[index] = g; index++;
		vertices[index] = b; index++;
		vertices[index] = a; index++;
	}

	glGenBuffers(1, &m_VBOParticle);	// (갯수, 레퍼런스에 넘겨줌)	
	// 이렇게만 하면 gpu에 VBO에 대한 메모리가 전혀 저장이 되지 않음.. 데이터를 올려줘야함
	glBindBuffer(GL_ARRAY_BUFFER, m_VBOParticle);	// testID라는 애를 쓰겠다는.. 활성화하겠다는 의미(내가 이해한건..)
	glBufferData(GL_ARRAY_BUFFER, sizeof(float)*totlaFloatCount, 
		vertices, GL_STATIC_DRAW);

	delete[] vertices;

	m_VBOParticleVertexCount = totalVerticesCount;
}
